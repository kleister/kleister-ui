// This file is auto-generated by @hey-api/openapi-ts

export const auth_loginSchema = {
  type: "object",
  required: ["username", "password"],
  properties: {
    username: {
      type: "string",
    },
    password: {
      type: "string",
      format: "password",
    },
  },
} as const;

export const auth_verifySchema = {
  type: "object",
  required: ["username"],
  properties: {
    username: {
      type: "string",
      readOnly: true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
    },
  },
} as const;

export const auth_tokenSchema = {
  type: "object",
  required: ["token"],
  properties: {
    token: {
      type: "string",
      readOnly: true,
    },
    expires_at: {
      type: "string",
      format: "date-time",
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
    },
  },
} as const;

export const profileSchema = {
  title: "Profile",
  description: "Model to represent profile",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    username: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    password: {
      type: "string",
      format: "password",
      "x-omitempty": true,
      "x-nullable": true,
    },
    email: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    fullname: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    profile: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    admin: {
      type: "boolean",
      readOnly: true,
    },
    active: {
      type: "boolean",
      readOnly: true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    auths: {
      type: "array",
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      items: {
        $ref: "#/components/schemas/user_auth",
      },
    },
    teams: {
      type: "array",
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      items: {
        $ref: "#/components/schemas/user_team",
      },
    },
    packs: {
      type: "array",
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      items: {
        $ref: "#/components/schemas/user_pack",
      },
    },
    mods: {
      type: "array",
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      items: {
        $ref: "#/components/schemas/user_mod",
      },
    },
  },
} as const;

export const minecraftsSchema = {
  title: "Minecrafts",
  description: "Model to represent list of minecrafts",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/minecraft",
      },
    },
  },
} as const;

export const minecraftSchema = {
  title: "Minecraft",
  description: "Model to represent minecraft",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    type: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const minecraft_buildsSchema = {
  title: "Minecraft Builds",
  description: "Model to represent minecraft builds",
  type: "object",
  properties: {
    minecraft: {
      $ref: "#/components/schemas/minecraft",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    builds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/build",
      },
    },
  },
} as const;

export const minecraft_build_paramsSchema = {
  title: "Minecraft Build Params",
  description: "Model to represent params for minecraft builds",
  type: "object",
  required: ["pack", "build"],
  properties: {
    pack: {
      type: "string",
    },
    build: {
      type: "string",
    },
  },
} as const;

export const forgesSchema = {
  title: "Forges",
  description: "Model to represent list of forges",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/forge",
      },
    },
  },
} as const;

export const forgeSchema = {
  title: "Forge",
  description: "Model to represent forge",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    minecraft: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const forge_buildsSchema = {
  title: "Forge Builds",
  description: "Model to represent forge builds",
  type: "object",
  properties: {
    forge: {
      $ref: "#/components/schemas/forge",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    builds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/build",
      },
    },
  },
} as const;

export const forge_build_paramsSchema = {
  title: "Forge Build Params",
  description: "Model to represent params for forge builds",
  type: "object",
  required: ["pack", "build"],
  properties: {
    pack: {
      type: "string",
    },
    build: {
      type: "string",
    },
  },
} as const;

export const neoforgesSchema = {
  title: "Neoforges",
  description: "Model to represent list of neoforges",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/neoforge",
      },
    },
  },
} as const;

export const neoforgeSchema = {
  title: "Neoforge",
  description: "Model to represent neoforge",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const neoforge_buildsSchema = {
  title: "Neoforge Builds",
  description: "Model to represent neoforge builds",
  type: "object",
  properties: {
    neoforge: {
      $ref: "#/components/schemas/neoforge",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    builds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/build",
      },
    },
  },
} as const;

export const neoforge_build_paramsSchema = {
  title: "Neoforge Build Params",
  description: "Model to represent params for neoforge builds",
  type: "object",
  required: ["pack", "build"],
  properties: {
    pack: {
      type: "string",
    },
    build: {
      type: "string",
    },
  },
} as const;

export const quiltsSchema = {
  title: "Quilts",
  description: "Model to represent list of quilts",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/quilt",
      },
    },
  },
} as const;

export const quiltSchema = {
  title: "Quilt",
  description: "Model to represent quilt",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const quilt_buildsSchema = {
  title: "Quilt Builds",
  description: "Model to represent quilt builds",
  type: "object",
  properties: {
    quilt: {
      $ref: "#/components/schemas/quilt",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    builds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/build",
      },
    },
  },
} as const;

export const quilt_build_paramsSchema = {
  title: "Quilt Build Params",
  description: "Model to represent params for quilt builds",
  type: "object",
  required: ["pack", "build"],
  properties: {
    pack: {
      type: "string",
    },
    build: {
      type: "string",
    },
  },
} as const;

export const fabricsSchema = {
  title: "Fabrics",
  description: "Model to represent list of fabrics",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/fabric",
      },
    },
  },
} as const;

export const fabricSchema = {
  title: "Fabric",
  description: "Model to represent fabric",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const fabric_buildsSchema = {
  title: "Fabric Builds",
  description: "Model to represent fabric builds",
  type: "object",
  properties: {
    fabric: {
      $ref: "#/components/schemas/fabric",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    builds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/build",
      },
    },
  },
} as const;

export const fabric_build_paramsSchema = {
  title: "Fabric Build Params",
  description: "Model to represent params for fabric builds",
  type: "object",
  required: ["pack", "build"],
  properties: {
    pack: {
      type: "string",
    },
    build: {
      type: "string",
    },
  },
} as const;

export const modsSchema = {
  title: "Mods",
  description: "Model to represent list of mods",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    mods: {
      type: "array",
      items: {
        $ref: "#/components/schemas/mod",
      },
    },
  },
} as const;

export const modSchema = {
  title: "Mod",
  description: "Model to represent mod",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    side: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    description: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    author: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    website: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    donate: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    public: {
      type: "boolean",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const versionsSchema = {
  title: "Versions",
  description: "Model to represent list of versions",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    mod: {
      readOnly: true,
      $ref: "#/components/schemas/mod",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/version",
      },
    },
  },
} as const;

export const versionSchema = {
  title: "Version",
  description: "Model to represent version",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    file: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/version_file",
    },
    mod: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/mod",
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    public: {
      type: "boolean",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const version_fileSchema = {
  title: "Version File",
  description: "Model to represent version file",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    content_type: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    md5: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    path: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    url: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    upload: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const packsSchema = {
  title: "Packs",
  description: "Model to represent list of packs",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    packs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/pack",
      },
    },
  },
} as const;

export const packSchema = {
  title: "Pack",
  description: "Model to represent pack",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    icon: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/pack_icon",
    },
    logo: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/pack_logo",
    },
    back: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/pack_back",
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    website: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    public: {
      type: "boolean",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const pack_iconSchema = {
  title: "Pack Icon",
  description: "Model to represent pack icon",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    content_type: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    md5: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    path: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    url: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    upload: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const pack_logoSchema = {
  title: "Pack Logo",
  description: "Model to represent pack logo",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    content_type: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    md5: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    path: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    url: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    upload: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const pack_backSchema = {
  title: "Pack Background",
  description: "Model to represent pack background",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    content_type: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    md5: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    path: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    url: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    upload: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const buildsSchema = {
  title: "Builds",
  description: "Model to represent list of builds",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    pack: {
      readOnly: true,
      $ref: "#/components/schemas/pack",
    },
    builds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/build",
      },
    },
  },
} as const;

export const buildSchema = {
  title: "Build",
  description: "Model to represent build",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    pack: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/pack",
    },
    minecraft_id: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    minecraft: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/minecraft",
    },
    forge_id: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    forge: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/forge",
    },
    neoforge_id: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    neoforge: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/neoforge",
    },
    quilt_id: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    quilt: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/quilt",
    },
    fabric_id: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    fabric: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/fabric",
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    java: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    memory: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    latest: {
      type: "boolean",
      "x-omitempty": true,
      "x-nullable": true,
    },
    recommended: {
      type: "boolean",
      "x-omitempty": true,
      "x-nullable": true,
    },
    public: {
      type: "boolean",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const teamsSchema = {
  title: "Teams",
  description: "Model to represent list of teams",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    teams: {
      type: "array",
      items: {
        $ref: "#/components/schemas/team",
      },
    },
  },
} as const;

export const teamSchema = {
  title: "Team",
  description: "Model to represent team",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    slug: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    name: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const team_packsSchema = {
  title: "Team Packs",
  description: "Model to represent team packs",
  type: "object",
  properties: {
    team: {
      $ref: "#/components/schemas/team",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    packs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/team_pack",
      },
    },
  },
} as const;

export const team_pack_paramsSchema = {
  title: "Team Pack Params",
  description: "Parameters to attach or unlink team pack",
  type: "object",
  required: ["pack"],
  properties: {
    pack: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const pack_teamsSchema = {
  title: "Pack Teams",
  description: "Model to represent pack teams",
  type: "object",
  properties: {
    pack: {
      $ref: "#/components/schemas/pack",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    teams: {
      type: "array",
      items: {
        $ref: "#/components/schemas/team_pack",
      },
    },
  },
} as const;

export const pack_team_paramsSchema = {
  title: "Pack Team Params",
  description: "Parameters to attach or unlink pack team",
  type: "object",
  required: ["team"],
  properties: {
    team: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const team_packSchema = {
  title: "Team Pack",
  description: "Model to represent team pack",
  type: "object",
  required: ["team_id", "pack_id"],
  properties: {
    team_id: {
      type: "string",
    },
    team: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/team",
    },
    pack_id: {
      type: "string",
    },
    pack: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/pack",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const team_modsSchema = {
  title: "Team Mods",
  description: "Model to represent team mods",
  type: "object",
  properties: {
    team: {
      $ref: "#/components/schemas/team",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    mods: {
      type: "array",
      items: {
        $ref: "#/components/schemas/team_mod",
      },
    },
  },
} as const;

export const team_mod_paramsSchema = {
  title: "Team Mod Params",
  description: "Parameters to attach or unlink team mod",
  type: "object",
  required: ["mod"],
  properties: {
    mod: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const mod_teamsSchema = {
  title: "Mod Teams",
  description: "Model to represent mod teams",
  type: "object",
  properties: {
    mod: {
      $ref: "#/components/schemas/mod",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    teams: {
      type: "array",
      items: {
        $ref: "#/components/schemas/team_mod",
      },
    },
  },
} as const;

export const mod_team_paramsSchema = {
  title: "Mod Team Params",
  description: "Parameters to attach or unlink mod team",
  type: "object",
  required: ["team"],
  properties: {
    team: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const team_modSchema = {
  title: "Team Mod",
  description: "Model to represent team mod",
  type: "object",
  required: ["team_id", "mod_id"],
  properties: {
    team_id: {
      type: "string",
    },
    team: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/team",
    },
    mod_id: {
      type: "string",
    },
    mod: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/mod",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const usersSchema = {
  title: "Users",
  description: "Model to represent list of users",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    users: {
      type: "array",
      items: {
        $ref: "#/components/schemas/user",
      },
    },
  },
} as const;

export const userSchema = {
  title: "User",
  description: "Model to represent user",
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    username: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    password: {
      type: "string",
      format: "password",
      "x-omitempty": true,
      "x-nullable": true,
    },
    email: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    fullname: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    profile: {
      type: "string",
      "x-omitempty": true,
      "x-nullable": true,
    },
    admin: {
      type: "boolean",
      "x-omitempty": true,
      "x-nullable": true,
    },
    active: {
      type: "boolean",
      "x-omitempty": true,
      "x-nullable": true,
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    auths: {
      type: "array",
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      items: {
        $ref: "#/components/schemas/user_auth",
      },
    },
  },
} as const;

export const user_authSchema = {
  title: "User Auth",
  description: "Model to represent user auth",
  type: "object",
  properties: {
    provider: {
      type: "string",
    },
    ref: {
      type: "string",
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const user_teamsSchema = {
  title: "User Teams",
  description: "Model to represent user teams",
  type: "object",
  properties: {
    user: {
      $ref: "#/components/schemas/user",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    teams: {
      type: "array",
      items: {
        $ref: "#/components/schemas/user_team",
      },
    },
  },
} as const;

export const user_team_paramsSchema = {
  title: "User Team Params",
  description: "Parameters to attach or unlink user team",
  type: "object",
  required: ["team"],
  properties: {
    team: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const team_usersSchema = {
  title: "Team Users",
  description: "Model to represent team users",
  type: "object",
  properties: {
    team: {
      $ref: "#/components/schemas/team",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    users: {
      type: "array",
      items: {
        $ref: "#/components/schemas/user_team",
      },
    },
  },
} as const;

export const team_user_paramsSchema = {
  title: "Team User Params",
  description: "Parameters to attach or unlink team user",
  type: "object",
  required: ["user"],
  properties: {
    user: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const user_teamSchema = {
  title: "User Team",
  description: "Model to represent user team",
  type: "object",
  required: ["user_id", "team_id"],
  properties: {
    user_id: {
      type: "string",
    },
    user: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/user",
    },
    team_id: {
      type: "string",
    },
    team: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/team",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const user_packsSchema = {
  title: "User Packs",
  description: "Model to represent user packs",
  type: "object",
  properties: {
    user: {
      $ref: "#/components/schemas/user",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    packs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/user_pack",
      },
    },
  },
} as const;

export const user_pack_paramsSchema = {
  title: "User Pack Params",
  description: "Parameters to attach or unlink user pack",
  type: "object",
  required: ["pack"],
  properties: {
    pack: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const pack_usersSchema = {
  title: "Pack Users",
  description: "Model to represent pack users",
  type: "object",
  properties: {
    pack: {
      $ref: "#/components/schemas/pack",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    users: {
      type: "array",
      items: {
        $ref: "#/components/schemas/user_pack",
      },
    },
  },
} as const;

export const pack_user_paramsSchema = {
  title: "Pack User Params",
  description: "Parameters to attach or unlink pack user",
  type: "object",
  required: ["user"],
  properties: {
    user: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const user_packSchema = {
  title: "User Pack",
  description: "Model to represent user pack",
  type: "object",
  required: ["user_id", "pack_id"],
  properties: {
    user_id: {
      type: "string",
    },
    user: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/user",
    },
    pack_id: {
      type: "string",
    },
    pack: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/pack",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const user_modsSchema = {
  title: "User Mods",
  description: "Model to represent user mods",
  type: "object",
  properties: {
    user: {
      $ref: "#/components/schemas/user",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    mods: {
      type: "array",
      items: {
        $ref: "#/components/schemas/user_mod",
      },
    },
  },
} as const;

export const user_mod_paramsSchema = {
  title: "User Mod Params",
  description: "Parameters to attach or unlink user mod",
  type: "object",
  required: ["mod"],
  properties: {
    mod: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const mod_usersSchema = {
  title: "Mod Users",
  description: "Model to represent mod users",
  type: "object",
  properties: {
    mod: {
      $ref: "#/components/schemas/mod",
      readOnly: true,
    },
    total: {
      type: "integer",
      format: "int64",
    },
    users: {
      type: "array",
      items: {
        $ref: "#/components/schemas/user_mod",
      },
    },
  },
} as const;

export const mod_user_paramsSchema = {
  title: "Mod User Params",
  description: "Parameters to attach or unlink mod user",
  type: "object",
  required: ["user"],
  properties: {
    user: {
      type: "string",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
  },
} as const;

export const user_modSchema = {
  title: "User Mod",
  description: "Model to represent user mod",
  type: "object",
  required: ["user_id", "mod_id"],
  properties: {
    user_id: {
      type: "string",
    },
    user: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/user",
    },
    mod_id: {
      type: "string",
    },
    mod: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/mod",
    },
    perm: {
      type: "string",
      default: "user",
      enum: ["user", "admin", "owner"],
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const build_versionsSchema = {
  title: "Build Versions",
  description: "Model to represent build versions",
  type: "object",
  properties: {
    pack: {
      readOnly: true,
      $ref: "#/components/schemas/pack",
    },
    build: {
      readOnly: true,
      $ref: "#/components/schemas/build",
    },
    total: {
      type: "integer",
      format: "int64",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/build_version",
      },
    },
  },
} as const;

export const build_version_paramsSchema = {
  title: "Build Version Params",
  description: "Parameters to attach or unlink build version",
  type: "object",
  required: ["mod", "version"],
  properties: {
    mod: {
      type: "string",
    },
    version: {
      type: "string",
    },
  },
} as const;

export const version_buildsSchema = {
  title: "Version Builds",
  description: "Model to represent version builds",
  type: "object",
  properties: {
    mod: {
      readOnly: true,
      $ref: "#/components/schemas/mod",
    },
    version: {
      readOnly: true,
      $ref: "#/components/schemas/version",
    },
    total: {
      type: "integer",
      format: "int64",
    },
    builds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/build_version",
      },
    },
  },
} as const;

export const version_build_paramsSchema = {
  title: "Version Build Params",
  description: "Parameters to attach or unlink version build",
  type: "object",
  required: ["pack", "build"],
  properties: {
    pack: {
      type: "string",
    },
    build: {
      type: "string",
    },
  },
} as const;

export const build_versionSchema = {
  title: "Build Version",
  description: "Model to represent build version",
  type: "object",
  required: ["build_id", "version_id"],
  properties: {
    build_id: {
      type: "string",
    },
    build: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/build",
    },
    version_id: {
      type: "string",
    },
    version: {
      "x-omitempty": true,
      "x-nullable": true,
      readOnly: true,
      $ref: "#/components/schemas/version",
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const providersSchema = {
  title: "Providers",
  description: "Model to represent list of auth providers",
  type: "object",
  properties: {
    total: {
      type: "integer",
      format: "int64",
    },
    listing: {
      type: "array",
      items: {
        $ref: "#/components/schemas/provider",
      },
    },
  },
} as const;

export const providerSchema = {
  title: "Provider",
  description: "Model to represent auth provider",
  type: "object",
  properties: {
    name: {
      type: "string",
      readOnly: true,
    },
    driver: {
      type: "string",
      readOnly: true,
    },
    display: {
      type: "string",
      readOnly: true,
    },
    icon: {
      type: "string",
      readOnly: true,
    },
  },
} as const;

export const notificationSchema = {
  title: "Notification",
  description: "Generic response for errors and validations",
  type: "object",
  properties: {
    status: {
      type: "integer",
      "x-omitempty": true,
    },
    message: {
      type: "string",
      "x-omitempty": true,
    },
    errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/validation",
      },
    },
  },
} as const;

export const validationSchema = {
  title: "Validation",
  description: "General structure to show validation errors",
  type: "object",
  properties: {
    field: {
      type: "string",
    },
    message: {
      type: "string",
    },
  },
} as const;
