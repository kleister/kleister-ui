// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-axios";
import type {
  ExternalInitializeData,
  ExternalInitializeError,
  ExternalInitializeResponse,
  ExternalCallbackData,
  ExternalCallbackError,
  ExternalCallbackResponse,
  LoginAuthData,
  LoginAuthError,
  LoginAuthResponse,
  RefreshAuthError,
  RefreshAuthResponse,
  VerifyAuthError,
  VerifyAuthResponse,
  TokenProfileError,
  TokenProfileResponse,
  ShowProfileError,
  ShowProfileResponse,
  UpdateProfileData,
  UpdateProfileError,
  UpdateProfileResponse,
  ListMinecraftsData,
  ListMinecraftsError,
  ListMinecraftsResponse,
  UpdateMinecraftError,
  UpdateMinecraftResponse,
  ListMinecraftBuildsData,
  ListMinecraftBuildsError,
  ListMinecraftBuildsResponse,
  AttachMinecraftToBuildData,
  AttachMinecraftToBuildError,
  AttachMinecraftToBuildResponse,
  DeleteMinecraftFromBuildData,
  DeleteMinecraftFromBuildError,
  DeleteMinecraftFromBuildResponse,
  ListForgesData,
  ListForgesError,
  ListForgesResponse,
  UpdateForgeError,
  UpdateForgeResponse,
  ListForgeBuildsData,
  ListForgeBuildsError,
  ListForgeBuildsResponse,
  AttachForgeToBuildData,
  AttachForgeToBuildError,
  AttachForgeToBuildResponse,
  DeleteForgeFromBuildData,
  DeleteForgeFromBuildError,
  DeleteForgeFromBuildResponse,
  ListNeoforgesData,
  ListNeoforgesError,
  ListNeoforgesResponse,
  UpdateNeoforgeError,
  UpdateNeoforgeResponse,
  ListNeoforgeBuildsData,
  ListNeoforgeBuildsError,
  ListNeoforgeBuildsResponse,
  AttachNeoforgeToBuildData,
  AttachNeoforgeToBuildError,
  AttachNeoforgeToBuildResponse,
  DeleteNeoforgeFromBuildData,
  DeleteNeoforgeFromBuildError,
  DeleteNeoforgeFromBuildResponse,
  ListQuiltsData,
  ListQuiltsError,
  ListQuiltsResponse,
  UpdateQuiltError,
  UpdateQuiltResponse,
  ListQuiltBuildsData,
  ListQuiltBuildsError,
  ListQuiltBuildsResponse,
  AttachQuiltToBuildData,
  AttachQuiltToBuildError,
  AttachQuiltToBuildResponse,
  DeleteQuiltFromBuildData,
  DeleteQuiltFromBuildError,
  DeleteQuiltFromBuildResponse,
  ListFabricsData,
  ListFabricsError,
  ListFabricsResponse,
  UpdateFabricError,
  UpdateFabricResponse,
  ListFabricBuildsData,
  ListFabricBuildsError,
  ListFabricBuildsResponse,
  AttachFabricToBuildData,
  AttachFabricToBuildError,
  AttachFabricToBuildResponse,
  DeleteFabricFromBuildData,
  DeleteFabricFromBuildError,
  DeleteFabricFromBuildResponse,
  ListPacksData,
  ListPacksError,
  ListPacksResponse,
  CreatePackData,
  CreatePackError,
  CreatePackResponse,
  ShowPackData,
  ShowPackError,
  ShowPackResponse,
  UpdatePackData,
  UpdatePackError,
  UpdatePackResponse,
  DeletePackData,
  DeletePackError,
  DeletePackResponse,
  ListPackUsersData,
  ListPackUsersError,
  ListPackUsersResponse,
  AttachPackToUserData,
  AttachPackToUserError,
  AttachPackToUserResponse,
  PermitPackUserData,
  PermitPackUserError,
  PermitPackUserResponse,
  DeletePackFromUserData,
  DeletePackFromUserError,
  DeletePackFromUserResponse,
  ListPackTeamsData,
  ListPackTeamsError,
  ListPackTeamsResponse,
  AttachPackToTeamData,
  AttachPackToTeamError,
  AttachPackToTeamResponse,
  PermitPackTeamData,
  PermitPackTeamError,
  PermitPackTeamResponse,
  DeletePackFromTeamData,
  DeletePackFromTeamError,
  DeletePackFromTeamResponse,
  ListBuildsData,
  ListBuildsError,
  ListBuildsResponse,
  CreateBuildData,
  CreateBuildError,
  CreateBuildResponse,
  ShowBuildData,
  ShowBuildError,
  ShowBuildResponse,
  UpdateBuildData,
  UpdateBuildError,
  UpdateBuildResponse,
  DeleteBuildData,
  DeleteBuildError,
  DeleteBuildResponse,
  ListBuildVersionsData,
  ListBuildVersionsError,
  ListBuildVersionsResponse,
  AttachBuildToVersionData,
  AttachBuildToVersionError,
  AttachBuildToVersionResponse,
  DeleteBuildFromVersionData,
  DeleteBuildFromVersionError,
  DeleteBuildFromVersionResponse,
  ListModsData,
  ListModsError,
  ListModsResponse,
  CreateModData,
  CreateModError,
  CreateModResponse,
  ShowModData,
  ShowModError,
  ShowModResponse,
  UpdateModData,
  UpdateModError,
  UpdateModResponse,
  DeleteModData,
  DeleteModError,
  DeleteModResponse,
  ListModUsersData,
  ListModUsersError,
  ListModUsersResponse,
  AttachModToUserData,
  AttachModToUserError,
  AttachModToUserResponse,
  PermitModUserData,
  PermitModUserError,
  PermitModUserResponse,
  DeleteModFromUserData,
  DeleteModFromUserError,
  DeleteModFromUserResponse,
  ListModTeamsData,
  ListModTeamsError,
  ListModTeamsResponse,
  AttachModToTeamData,
  AttachModToTeamError,
  AttachModToTeamResponse,
  PermitModTeamData,
  PermitModTeamError,
  PermitModTeamResponse,
  DeleteModFromTeamData,
  DeleteModFromTeamError,
  DeleteModFromTeamResponse,
  ListVersionsData,
  ListVersionsError,
  ListVersionsResponse,
  CreateVersionData,
  CreateVersionError,
  CreateVersionResponse,
  ShowVersionData,
  ShowVersionError,
  ShowVersionResponse,
  UpdateVersionData,
  UpdateVersionError,
  UpdateVersionResponse,
  DeleteVersionData,
  DeleteVersionError,
  DeleteVersionResponse,
  ListVersionBuildsData,
  ListVersionBuildsError,
  ListVersionBuildsResponse,
  AttachVersionToBuildData,
  AttachVersionToBuildError,
  AttachVersionToBuildResponse,
  DeleteVersionFromBuildData,
  DeleteVersionFromBuildError,
  DeleteVersionFromBuildResponse,
  ListTeamsData,
  ListTeamsError,
  ListTeamsResponse,
  CreateTeamData,
  CreateTeamError,
  CreateTeamResponse,
  ShowTeamData,
  ShowTeamError,
  ShowTeamResponse,
  UpdateTeamData,
  UpdateTeamError,
  UpdateTeamResponse,
  DeleteTeamData,
  DeleteTeamError,
  DeleteTeamResponse,
  ListTeamUsersData,
  ListTeamUsersError,
  ListTeamUsersResponse,
  AttachTeamToUserData,
  AttachTeamToUserError,
  AttachTeamToUserResponse,
  PermitTeamUserData,
  PermitTeamUserError,
  PermitTeamUserResponse,
  DeleteTeamFromUserData,
  DeleteTeamFromUserError,
  DeleteTeamFromUserResponse,
  ListTeamModsData,
  ListTeamModsError,
  ListTeamModsResponse,
  AttachTeamToModData,
  AttachTeamToModError,
  AttachTeamToModResponse,
  PermitTeamModData,
  PermitTeamModError,
  PermitTeamModResponse,
  DeleteTeamFromModData,
  DeleteTeamFromModError,
  DeleteTeamFromModResponse,
  ListTeamPacksData,
  ListTeamPacksError,
  ListTeamPacksResponse,
  AttachTeamToPackData,
  AttachTeamToPackError,
  AttachTeamToPackResponse,
  PermitTeamPackData,
  PermitTeamPackError,
  PermitTeamPackResponse,
  DeleteTeamFromPackData,
  DeleteTeamFromPackError,
  DeleteTeamFromPackResponse,
  ListUsersData,
  ListUsersError,
  ListUsersResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  ShowUserData,
  ShowUserError,
  ShowUserResponse,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  DeleteUserData,
  DeleteUserError,
  DeleteUserResponse,
  ListUserTeamsData,
  ListUserTeamsError,
  ListUserTeamsResponse,
  AttachUserToTeamData,
  AttachUserToTeamError,
  AttachUserToTeamResponse,
  PermitUserTeamData,
  PermitUserTeamError,
  PermitUserTeamResponse,
  DeleteUserFromTeamData,
  DeleteUserFromTeamError,
  DeleteUserFromTeamResponse,
  ListUserModsData,
  ListUserModsError,
  ListUserModsResponse,
  AttachUserToModData,
  AttachUserToModError,
  AttachUserToModResponse,
  PermitUserModData,
  PermitUserModError,
  PermitUserModResponse,
  DeleteUserFromModData,
  DeleteUserFromModError,
  DeleteUserFromModResponse,
  ListUserPacksData,
  ListUserPacksError,
  ListUserPacksResponse,
  AttachUserToPackData,
  AttachUserToPackError,
  AttachUserToPackResponse,
  PermitUserPackData,
  PermitUserPackError,
  PermitUserPackResponse,
  DeleteUserFromPackData,
  DeleteUserFromPackError,
  DeleteUserFromPackResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Initialize the external authentication
 */
export const externalInitialize = <ThrowOnError extends boolean = false>(
  options: Options<ExternalInitializeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ExternalInitializeResponse,
    ExternalInitializeError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/{provider}/initialize",
  });
};

/**
 * Callback for external authentication
 */
export const externalCallback = <ThrowOnError extends boolean = false>(
  options: Options<ExternalCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ExternalCallbackResponse,
    ExternalCallbackError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/{provider}/callback",
  });
};

/**
 * Authenticate an user by credentials
 */
export const loginAuth = <ThrowOnError extends boolean = false>(
  options: Options<LoginAuthData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginAuthResponse,
    LoginAuthError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/login",
  });
};

/**
 * Refresh an auth token before it expires
 */
export const refreshAuth = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RefreshAuthResponse,
    RefreshAuthError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/refresh",
  });
};

/**
 * Verify validity for an authentication token
 */
export const verifyAuth = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    VerifyAuthResponse,
    VerifyAuthError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/verify",
  });
};

/**
 * Retrieve an unlimited auth token
 */
export const tokenProfile = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TokenProfileResponse,
    TokenProfileError,
    ThrowOnError
  >({
    ...options,
    url: "/profile/token",
  });
};

/**
 * Fetch profile details of the personal account
 */
export const showProfile = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ShowProfileResponse,
    ShowProfileError,
    ThrowOnError
  >({
    ...options,
    url: "/profile/self",
  });
};

/**
 * Update your own profile information
 */
export const updateProfile = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateProfileResponse,
    UpdateProfileError,
    ThrowOnError
  >({
    ...options,
    url: "/profile/self",
  });
};

/**
 * Fetch the available Minecraft versions
 */
export const listMinecrafts = <ThrowOnError extends boolean = false>(
  options?: Options<ListMinecraftsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListMinecraftsResponse,
    ListMinecraftsError,
    ThrowOnError
  >({
    ...options,
    url: "/minecraft",
  });
};

/**
 * Update the available Minecraft versions
 */
export const updateMinecraft = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateMinecraftResponse,
    UpdateMinecraftError,
    ThrowOnError
  >({
    ...options,
    url: "/minecraft",
  });
};

/**
 * Fetch the builds attached to a Minecraft version
 */
export const listMinecraftBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListMinecraftBuildsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListMinecraftBuildsResponse,
    ListMinecraftBuildsError,
    ThrowOnError
  >({
    ...options,
    url: "/minecraft/{minecraft_id}/builds",
  });
};

/**
 * Attach a build to a Minecraft version
 */
export const attachMinecraftToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachMinecraftToBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachMinecraftToBuildResponse,
    AttachMinecraftToBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/minecraft/{minecraft_id}/builds",
  });
};

/**
 * Unlink a build from a Minecraft version
 */
export const deleteMinecraftFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMinecraftFromBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteMinecraftFromBuildResponse,
    DeleteMinecraftFromBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/minecraft/{minecraft_id}/builds",
  });
};

/**
 * Fetch the available Forge versions
 */
export const listForges = <ThrowOnError extends boolean = false>(
  options?: Options<ListForgesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListForgesResponse,
    ListForgesError,
    ThrowOnError
  >({
    ...options,
    url: "/forge",
  });
};

/**
 * Update the available Forge versions
 */
export const updateForge = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateForgeResponse,
    UpdateForgeError,
    ThrowOnError
  >({
    ...options,
    url: "/forge",
  });
};

/**
 * Fetch the builds attached to a Forge version
 */
export const listForgeBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListForgeBuildsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListForgeBuildsResponse,
    ListForgeBuildsError,
    ThrowOnError
  >({
    ...options,
    url: "/forge/{forge_id}/builds",
  });
};

/**
 * Attach a build to a Forge version
 */
export const attachForgeToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachForgeToBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachForgeToBuildResponse,
    AttachForgeToBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/forge/{forge_id}/builds",
  });
};

/**
 * Unlink a build from a Forge version
 */
export const deleteForgeFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteForgeFromBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteForgeFromBuildResponse,
    DeleteForgeFromBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/forge/{forge_id}/builds",
  });
};

/**
 * Fetch the available Neoforge versions
 */
export const listNeoforges = <ThrowOnError extends boolean = false>(
  options?: Options<ListNeoforgesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListNeoforgesResponse,
    ListNeoforgesError,
    ThrowOnError
  >({
    ...options,
    url: "/neoforge",
  });
};

/**
 * Update the available Neoforge versions
 */
export const updateNeoforge = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateNeoforgeResponse,
    UpdateNeoforgeError,
    ThrowOnError
  >({
    ...options,
    url: "/neoforge",
  });
};

/**
 * Fetch the builds attached to a Neoforge version
 */
export const listNeoforgeBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListNeoforgeBuildsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListNeoforgeBuildsResponse,
    ListNeoforgeBuildsError,
    ThrowOnError
  >({
    ...options,
    url: "/neoforge/{neoforge_id}/builds",
  });
};

/**
 * Attach a build to a Neoforge version
 */
export const attachNeoforgeToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachNeoforgeToBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachNeoforgeToBuildResponse,
    AttachNeoforgeToBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/neoforge/{neoforge_id}/builds",
  });
};

/**
 * Unlink a build from a Neoforge version
 */
export const deleteNeoforgeFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteNeoforgeFromBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteNeoforgeFromBuildResponse,
    DeleteNeoforgeFromBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/neoforge/{neoforge_id}/builds",
  });
};

/**
 * Fetch the available Quilt versions
 */
export const listQuilts = <ThrowOnError extends boolean = false>(
  options?: Options<ListQuiltsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListQuiltsResponse,
    ListQuiltsError,
    ThrowOnError
  >({
    ...options,
    url: "/quilt",
  });
};

/**
 * Update the available Quilt versions
 */
export const updateQuilt = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateQuiltResponse,
    UpdateQuiltError,
    ThrowOnError
  >({
    ...options,
    url: "/quilt",
  });
};

/**
 * Fetch the builds attached to a Quilt version
 */
export const listQuiltBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListQuiltBuildsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListQuiltBuildsResponse,
    ListQuiltBuildsError,
    ThrowOnError
  >({
    ...options,
    url: "/quilt/{quilt_id}/builds",
  });
};

/**
 * Attach a build to a Quilt version
 */
export const attachQuiltToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachQuiltToBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachQuiltToBuildResponse,
    AttachQuiltToBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/quilt/{quilt_id}/builds",
  });
};

/**
 * Unlink a build from a Quilt version
 */
export const deleteQuiltFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteQuiltFromBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteQuiltFromBuildResponse,
    DeleteQuiltFromBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/quilt/{quilt_id}/builds",
  });
};

/**
 * Fetch the available Fabric versions
 */
export const listFabrics = <ThrowOnError extends boolean = false>(
  options?: Options<ListFabricsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListFabricsResponse,
    ListFabricsError,
    ThrowOnError
  >({
    ...options,
    url: "/fabric",
  });
};

/**
 * Update the available Fabric versions
 */
export const updateFabric = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateFabricResponse,
    UpdateFabricError,
    ThrowOnError
  >({
    ...options,
    url: "/fabric",
  });
};

/**
 * Fetch the builds attached to a Fabric version
 */
export const listFabricBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListFabricBuildsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListFabricBuildsResponse,
    ListFabricBuildsError,
    ThrowOnError
  >({
    ...options,
    url: "/fabric/{fabric_id}/builds",
  });
};

/**
 * Attach a build to a Fabric version
 */
export const attachFabricToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachFabricToBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachFabricToBuildResponse,
    AttachFabricToBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/fabric/{fabric_id}/builds",
  });
};

/**
 * Unlink a build from a Fabric version
 */
export const deleteFabricFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFabricFromBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteFabricFromBuildResponse,
    DeleteFabricFromBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/fabric/{fabric_id}/builds",
  });
};

/**
 * Fetch all available packs
 */
export const listPacks = <ThrowOnError extends boolean = false>(
  options?: Options<ListPacksData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListPacksResponse,
    ListPacksError,
    ThrowOnError
  >({
    ...options,
    url: "/packs",
  });
};

/**
 * Create a new pack
 */
export const createPack = <ThrowOnError extends boolean = false>(
  options: Options<CreatePackData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePackResponse,
    CreatePackError,
    ThrowOnError
  >({
    ...options,
    url: "/packs",
  });
};

/**
 * Fetch a specific pack
 */
export const showPack = <ThrowOnError extends boolean = false>(
  options: Options<ShowPackData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ShowPackResponse,
    ShowPackError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}",
  });
};

/**
 * Update a specific pack
 */
export const updatePack = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePackData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePackResponse,
    UpdatePackError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}",
  });
};

/**
 * Delete a specific pack
 */
export const deletePack = <ThrowOnError extends boolean = false>(
  options: Options<DeletePackData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePackResponse,
    DeletePackError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}",
  });
};

/**
 * Fetch all users attached to pack
 */
export const listPackUsers = <ThrowOnError extends boolean = false>(
  options: Options<ListPackUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListPackUsersResponse,
    ListPackUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/users",
  });
};

/**
 * Attach a user to pack
 */
export const attachPackToUser = <ThrowOnError extends boolean = false>(
  options: Options<AttachPackToUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachPackToUserResponse,
    AttachPackToUserError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/users",
  });
};

/**
 * Update user perms for pack
 */
export const permitPackUser = <ThrowOnError extends boolean = false>(
  options: Options<PermitPackUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitPackUserResponse,
    PermitPackUserError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/users",
  });
};

/**
 * Unlink a user from pack
 */
export const deletePackFromUser = <ThrowOnError extends boolean = false>(
  options: Options<DeletePackFromUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePackFromUserResponse,
    DeletePackFromUserError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/users",
  });
};

/**
 * Fetch all teams attached to pack
 */
export const listPackTeams = <ThrowOnError extends boolean = false>(
  options: Options<ListPackTeamsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListPackTeamsResponse,
    ListPackTeamsError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/teams",
  });
};

/**
 * Attach a team to pack
 */
export const attachPackToTeam = <ThrowOnError extends boolean = false>(
  options: Options<AttachPackToTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachPackToTeamResponse,
    AttachPackToTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/teams",
  });
};

/**
 * Update team perms for pack
 */
export const permitPackTeam = <ThrowOnError extends boolean = false>(
  options: Options<PermitPackTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitPackTeamResponse,
    PermitPackTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/teams",
  });
};

/**
 * Unlink a team from pack
 */
export const deletePackFromTeam = <ThrowOnError extends boolean = false>(
  options: Options<DeletePackFromTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePackFromTeamResponse,
    DeletePackFromTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/teams",
  });
};

/**
 * Fetch all available builds for a pack
 */
export const listBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListBuildsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListBuildsResponse,
    ListBuildsError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/builds",
  });
};

/**
 * Create a new build for a pack
 */
export const createBuild = <ThrowOnError extends boolean = false>(
  options: Options<CreateBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateBuildResponse,
    CreateBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/builds",
  });
};

/**
 * Fetch a specific build for a pack
 */
export const showBuild = <ThrowOnError extends boolean = false>(
  options: Options<ShowBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ShowBuildResponse,
    ShowBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/builds/{build_id}",
  });
};

/**
 * Update a specific build for a pack
 */
export const updateBuild = <ThrowOnError extends boolean = false>(
  options: Options<UpdateBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateBuildResponse,
    UpdateBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/builds/{build_id}",
  });
};

/**
 * Delete a specific build for a pack
 */
export const deleteBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteBuildResponse,
    DeleteBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/builds/{build_id}",
  });
};

/**
 * Fetch all versions attached to build
 */
export const listBuildVersions = <ThrowOnError extends boolean = false>(
  options: Options<ListBuildVersionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListBuildVersionsResponse,
    ListBuildVersionsError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/builds/{build_id}/versions",
  });
};

/**
 * Attach a version to a build
 */
export const attachBuildToVersion = <ThrowOnError extends boolean = false>(
  options: Options<AttachBuildToVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachBuildToVersionResponse,
    AttachBuildToVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/builds/{build_id}/versions",
  });
};

/**
 * Unlink a version from a build
 */
export const deleteBuildFromVersion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBuildFromVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteBuildFromVersionResponse,
    DeleteBuildFromVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/packs/{pack_id}/builds/{build_id}/versions",
  });
};

/**
 * Fetch all available mods
 */
export const listMods = <ThrowOnError extends boolean = false>(
  options?: Options<ListModsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListModsResponse,
    ListModsError,
    ThrowOnError
  >({
    ...options,
    url: "/mods",
  });
};

/**
 * Create a new mod
 */
export const createMod = <ThrowOnError extends boolean = false>(
  options: Options<CreateModData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateModResponse,
    CreateModError,
    ThrowOnError
  >({
    ...options,
    url: "/mods",
  });
};

/**
 * Fetch a specific mod
 */
export const showMod = <ThrowOnError extends boolean = false>(
  options: Options<ShowModData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ShowModResponse,
    ShowModError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}",
  });
};

/**
 * Update a specific mod
 */
export const updateMod = <ThrowOnError extends boolean = false>(
  options: Options<UpdateModData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateModResponse,
    UpdateModError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}",
  });
};

/**
 * Delete a specific mod
 */
export const deleteMod = <ThrowOnError extends boolean = false>(
  options: Options<DeleteModData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteModResponse,
    DeleteModError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}",
  });
};

/**
 * Fetch all users attached to mod
 */
export const listModUsers = <ThrowOnError extends boolean = false>(
  options: Options<ListModUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListModUsersResponse,
    ListModUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/users",
  });
};

/**
 * Attach a user to mod
 */
export const attachModToUser = <ThrowOnError extends boolean = false>(
  options: Options<AttachModToUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachModToUserResponse,
    AttachModToUserError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/users",
  });
};

/**
 * Update user perms for mod
 */
export const permitModUser = <ThrowOnError extends boolean = false>(
  options: Options<PermitModUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitModUserResponse,
    PermitModUserError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/users",
  });
};

/**
 * Unlink a user from mod
 */
export const deleteModFromUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteModFromUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteModFromUserResponse,
    DeleteModFromUserError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/users",
  });
};

/**
 * Fetch all teams attached to mod
 */
export const listModTeams = <ThrowOnError extends boolean = false>(
  options: Options<ListModTeamsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListModTeamsResponse,
    ListModTeamsError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/teams",
  });
};

/**
 * Attach a team to mod
 */
export const attachModToTeam = <ThrowOnError extends boolean = false>(
  options: Options<AttachModToTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachModToTeamResponse,
    AttachModToTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/teams",
  });
};

/**
 * Update team perms for mod
 */
export const permitModTeam = <ThrowOnError extends boolean = false>(
  options: Options<PermitModTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitModTeamResponse,
    PermitModTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/teams",
  });
};

/**
 * Unlink a team from mod
 */
export const deleteModFromTeam = <ThrowOnError extends boolean = false>(
  options: Options<DeleteModFromTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteModFromTeamResponse,
    DeleteModFromTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/teams",
  });
};

/**
 * Fetch all available versions for a mod
 */
export const listVersions = <ThrowOnError extends boolean = false>(
  options: Options<ListVersionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListVersionsResponse,
    ListVersionsError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/versions",
  });
};

/**
 * Create a new version for a mod
 */
export const createVersion = <ThrowOnError extends boolean = false>(
  options: Options<CreateVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateVersionResponse,
    CreateVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/versions",
  });
};

/**
 * Fetch a specific version for a mod
 */
export const showVersion = <ThrowOnError extends boolean = false>(
  options: Options<ShowVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ShowVersionResponse,
    ShowVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/versions/{version_id}",
  });
};

/**
 * Update a specific version for a mod
 */
export const updateVersion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateVersionResponse,
    UpdateVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/versions/{version_id}",
  });
};

/**
 * Delete a specific version for a mod
 */
export const deleteVersion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteVersionResponse,
    DeleteVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/versions/{version_id}",
  });
};

/**
 * Fetch all builds attached to version
 */
export const listVersionBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListVersionBuildsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListVersionBuildsResponse,
    ListVersionBuildsError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/versions/{version_id}/builds",
  });
};

/**
 * Attach a build to a version
 */
export const attachVersionToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachVersionToBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachVersionToBuildResponse,
    AttachVersionToBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/versions/{version_id}/builds",
  });
};

/**
 * Unlink a build from a version
 */
export const deleteVersionFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteVersionFromBuildData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteVersionFromBuildResponse,
    DeleteVersionFromBuildError,
    ThrowOnError
  >({
    ...options,
    url: "/mods/{mod_id}/versions/{version_id}/builds",
  });
};

/**
 * Fetch all available teams
 */
export const listTeams = <ThrowOnError extends boolean = false>(
  options?: Options<ListTeamsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListTeamsResponse,
    ListTeamsError,
    ThrowOnError
  >({
    ...options,
    url: "/teams",
  });
};

/**
 * Create a new team
 */
export const createTeam = <ThrowOnError extends boolean = false>(
  options: Options<CreateTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateTeamResponse,
    CreateTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/teams",
  });
};

/**
 * Fetch a specific team
 */
export const showTeam = <ThrowOnError extends boolean = false>(
  options: Options<ShowTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ShowTeamResponse,
    ShowTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}",
  });
};

/**
 * Update a specific team
 */
export const updateTeam = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateTeamResponse,
    UpdateTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}",
  });
};

/**
 * Delete a specific team
 */
export const deleteTeam = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteTeamResponse,
    DeleteTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}",
  });
};

/**
 * Fetch all users attached to team
 */
export const listTeamUsers = <ThrowOnError extends boolean = false>(
  options: Options<ListTeamUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListTeamUsersResponse,
    ListTeamUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/users",
  });
};

/**
 * Attach a user to team
 */
export const attachTeamToUser = <ThrowOnError extends boolean = false>(
  options: Options<AttachTeamToUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachTeamToUserResponse,
    AttachTeamToUserError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/users",
  });
};

/**
 * Update user perms for team
 */
export const permitTeamUser = <ThrowOnError extends boolean = false>(
  options: Options<PermitTeamUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitTeamUserResponse,
    PermitTeamUserError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/users",
  });
};

/**
 * Unlink a user from team
 */
export const deleteTeamFromUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTeamFromUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteTeamFromUserResponse,
    DeleteTeamFromUserError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/users",
  });
};

/**
 * Fetch all mods attached to team
 */
export const listTeamMods = <ThrowOnError extends boolean = false>(
  options: Options<ListTeamModsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListTeamModsResponse,
    ListTeamModsError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/mods",
  });
};

/**
 * Attach a mod to team
 */
export const attachTeamToMod = <ThrowOnError extends boolean = false>(
  options: Options<AttachTeamToModData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachTeamToModResponse,
    AttachTeamToModError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/mods",
  });
};

/**
 * Update mod perms for team
 */
export const permitTeamMod = <ThrowOnError extends boolean = false>(
  options: Options<PermitTeamModData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitTeamModResponse,
    PermitTeamModError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/mods",
  });
};

/**
 * Unlink a mod from team
 */
export const deleteTeamFromMod = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTeamFromModData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteTeamFromModResponse,
    DeleteTeamFromModError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/mods",
  });
};

/**
 * Fetch all packs attached to team
 */
export const listTeamPacks = <ThrowOnError extends boolean = false>(
  options: Options<ListTeamPacksData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListTeamPacksResponse,
    ListTeamPacksError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/packs",
  });
};

/**
 * Attach a pack to team
 */
export const attachTeamToPack = <ThrowOnError extends boolean = false>(
  options: Options<AttachTeamToPackData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachTeamToPackResponse,
    AttachTeamToPackError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/packs",
  });
};

/**
 * Update pack perms for team
 */
export const permitTeamPack = <ThrowOnError extends boolean = false>(
  options: Options<PermitTeamPackData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitTeamPackResponse,
    PermitTeamPackError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/packs",
  });
};

/**
 * Unlink a pack from team
 */
export const deleteTeamFromPack = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTeamFromPackData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteTeamFromPackResponse,
    DeleteTeamFromPackError,
    ThrowOnError
  >({
    ...options,
    url: "/teams/{team_id}/packs",
  });
};

/**
 * Fetch all available users
 */
export const listUsers = <ThrowOnError extends boolean = false>(
  options?: Options<ListUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUsersResponse,
    ListUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/users",
  });
};

/**
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users",
  });
};

/**
 * Fetch a specific user
 */
export const showUser = <ThrowOnError extends boolean = false>(
  options: Options<ShowUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ShowUserResponse,
    ShowUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}",
  });
};

/**
 * Update a specific user
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}",
  });
};

/**
 * Delete a specific user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUserResponse,
    DeleteUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}",
  });
};

/**
 * Fetch all teams attached to user
 */
export const listUserTeams = <ThrowOnError extends boolean = false>(
  options: Options<ListUserTeamsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUserTeamsResponse,
    ListUserTeamsError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/teams",
  });
};

/**
 * Attach a team to user
 */
export const attachUserToTeam = <ThrowOnError extends boolean = false>(
  options: Options<AttachUserToTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachUserToTeamResponse,
    AttachUserToTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/teams",
  });
};

/**
 * Update team perms for user
 */
export const permitUserTeam = <ThrowOnError extends boolean = false>(
  options: Options<PermitUserTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitUserTeamResponse,
    PermitUserTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/teams",
  });
};

/**
 * Unlink a team from user
 */
export const deleteUserFromTeam = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserFromTeamData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUserFromTeamResponse,
    DeleteUserFromTeamError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/teams",
  });
};

/**
 * Fetch all mods attached to user
 */
export const listUserMods = <ThrowOnError extends boolean = false>(
  options: Options<ListUserModsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUserModsResponse,
    ListUserModsError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/mods",
  });
};

/**
 * Attach a mod to user
 */
export const attachUserToMod = <ThrowOnError extends boolean = false>(
  options: Options<AttachUserToModData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachUserToModResponse,
    AttachUserToModError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/mods",
  });
};

/**
 * Update mod perms for user
 */
export const permitUserMod = <ThrowOnError extends boolean = false>(
  options: Options<PermitUserModData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitUserModResponse,
    PermitUserModError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/mods",
  });
};

/**
 * Unlink a mod from user
 */
export const deleteUserFromMod = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserFromModData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUserFromModResponse,
    DeleteUserFromModError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/mods",
  });
};

/**
 * Fetch all packs attached to user
 */
export const listUserPacks = <ThrowOnError extends boolean = false>(
  options: Options<ListUserPacksData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListUserPacksResponse,
    ListUserPacksError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/packs",
  });
};

/**
 * Attach a pack to user
 */
export const attachUserToPack = <ThrowOnError extends boolean = false>(
  options: Options<AttachUserToPackData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachUserToPackResponse,
    AttachUserToPackError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/packs",
  });
};

/**
 * Update pack perms for user
 */
export const permitUserPack = <ThrowOnError extends boolean = false>(
  options: Options<PermitUserPackData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PermitUserPackResponse,
    PermitUserPackError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/packs",
  });
};

/**
 * Unlink a pack from user
 */
export const deleteUserFromPack = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserFromPackData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUserFromPackResponse,
    DeleteUserFromPackError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{user_id}/packs",
  });
};
