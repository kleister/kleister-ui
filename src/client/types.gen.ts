// This file is auto-generated by @hey-api/openapi-ts

export type auth_login = {
  username: string;
  password: string;
};

export type auth_verify = {
  readonly username: string;
  readonly created_at?: string;
};

export type auth_token = {
  readonly token: string;
  readonly expires_at?: string;
};

/**
 * Model to represent profile
 */
export type profile = {
  readonly id?: string;
  username?: string;
  password?: string;
  email?: string;
  fullname?: string;
  profile?: string;
  readonly admin?: boolean;
  readonly active?: boolean;
  readonly created_at?: string;
  readonly updated_at?: string;
  readonly auths?: Array<user_auth>;
  readonly teams?: Array<user_team>;
  readonly packs?: Array<user_pack>;
  readonly mods?: Array<user_mod>;
};

/**
 * Model to represent list of minecrafts
 */
export type minecrafts = {
  total?: number;
  versions?: Array<minecraft>;
};

/**
 * Model to represent minecraft
 */
export type minecraft = {
  readonly id?: string;
  name?: string;
  type?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent minecraft builds
 */
export type minecraft_builds = {
  readonly minecraft?: minecraft;
  total?: number;
  builds?: Array<build>;
};

/**
 * Model to represent params for minecraft builds
 */
export type minecraft_build_params = {
  pack: string;
  build: string;
};

/**
 * Model to represent list of forges
 */
export type forges = {
  total?: number;
  versions?: Array<forge>;
};

/**
 * Model to represent forge
 */
export type forge = {
  readonly id?: string;
  name?: string;
  minecraft?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent forge builds
 */
export type forge_builds = {
  readonly forge?: forge;
  total?: number;
  builds?: Array<build>;
};

/**
 * Model to represent params for forge builds
 */
export type forge_build_params = {
  pack: string;
  build: string;
};

/**
 * Model to represent list of neoforges
 */
export type neoforges = {
  total?: number;
  versions?: Array<neoforge>;
};

/**
 * Model to represent neoforge
 */
export type neoforge = {
  readonly id?: string;
  name?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent neoforge builds
 */
export type neoforge_builds = {
  readonly neoforge?: neoforge;
  total?: number;
  builds?: Array<build>;
};

/**
 * Model to represent params for neoforge builds
 */
export type neoforge_build_params = {
  pack: string;
  build: string;
};

/**
 * Model to represent list of quilts
 */
export type quilts = {
  total?: number;
  versions?: Array<quilt>;
};

/**
 * Model to represent quilt
 */
export type quilt = {
  readonly id?: string;
  name?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent quilt builds
 */
export type quilt_builds = {
  readonly quilt?: quilt;
  total?: number;
  builds?: Array<build>;
};

/**
 * Model to represent params for quilt builds
 */
export type quilt_build_params = {
  pack: string;
  build: string;
};

/**
 * Model to represent list of fabrics
 */
export type fabrics = {
  total?: number;
  versions?: Array<fabric>;
};

/**
 * Model to represent fabric
 */
export type fabric = {
  readonly id?: string;
  name?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent fabric builds
 */
export type fabric_builds = {
  readonly fabric?: fabric;
  total?: number;
  builds?: Array<build>;
};

/**
 * Model to represent params for fabric builds
 */
export type fabric_build_params = {
  pack: string;
  build: string;
};

/**
 * Model to represent list of mods
 */
export type mods = {
  total?: number;
  mods?: Array<mod>;
};

/**
 * Model to represent mod
 */
export type mod = {
  readonly id?: string;
  slug?: string;
  name?: string;
  side?: string;
  description?: string;
  author?: string;
  website?: string;
  donate?: string;
  public?: boolean;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent list of versions
 */
export type versions = {
  total?: number;
  readonly mod?: mod;
  versions?: Array<version>;
};

/**
 * Model to represent version
 */
export type version = {
  readonly id?: string;
  readonly file?: version_file;
  readonly mod?: mod;
  slug?: string;
  name?: string;
  public?: boolean;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent version file
 */
export type version_file = {
  readonly id?: string;
  slug?: string;
  content_type?: string;
  md5?: string;
  path?: string;
  url?: string;
  upload?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent list of packs
 */
export type packs = {
  total?: number;
  packs?: Array<pack>;
};

/**
 * Model to represent pack
 */
export type pack = {
  readonly id?: string;
  readonly icon?: pack_icon;
  readonly logo?: pack_logo;
  readonly back?: pack_back;
  slug?: string;
  name?: string;
  website?: string;
  public?: boolean;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent pack icon
 */
export type pack_icon = {
  readonly id?: string;
  slug?: string;
  content_type?: string;
  md5?: string;
  path?: string;
  url?: string;
  upload?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent pack logo
 */
export type pack_logo = {
  readonly id?: string;
  slug?: string;
  content_type?: string;
  md5?: string;
  path?: string;
  url?: string;
  upload?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent pack background
 */
export type pack_back = {
  readonly id?: string;
  slug?: string;
  content_type?: string;
  md5?: string;
  path?: string;
  url?: string;
  upload?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent list of builds
 */
export type builds = {
  total?: number;
  readonly pack?: pack;
  builds?: Array<build>;
};

/**
 * Model to represent build
 */
export type build = {
  readonly id?: string;
  readonly pack?: pack;
  minecraft_id?: string;
  readonly minecraft?: minecraft;
  forge_id?: string;
  readonly forge?: forge;
  neoforge_id?: string;
  readonly neoforge?: neoforge;
  quilt_id?: string;
  readonly quilt?: quilt;
  fabric_id?: string;
  readonly fabric?: fabric;
  slug?: string;
  name?: string;
  java?: string;
  memory?: string;
  latest?: boolean;
  recommended?: boolean;
  public?: boolean;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent list of teams
 */
export type teams = {
  total?: number;
  teams?: Array<team>;
};

/**
 * Model to represent team
 */
export type team = {
  readonly id?: string;
  slug?: string;
  name?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent team packs
 */
export type team_packs = {
  readonly team?: team;
  total?: number;
  packs?: Array<team_pack>;
};

/**
 * Parameters to attach or unlink team pack
 */
export type team_pack_params = {
  pack: string;
  perm?: "user" | "admin" | "owner";
};

export type perm = "user" | "admin" | "owner";

/**
 * Model to represent pack teams
 */
export type pack_teams = {
  readonly pack?: pack;
  total?: number;
  teams?: Array<team_pack>;
};

/**
 * Parameters to attach or unlink pack team
 */
export type pack_team_params = {
  team: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent team pack
 */
export type team_pack = {
  team_id: string;
  readonly team?: team;
  pack_id: string;
  readonly pack?: pack;
  perm?: "user" | "admin" | "owner";
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent team mods
 */
export type team_mods = {
  readonly team?: team;
  total?: number;
  mods?: Array<team_mod>;
};

/**
 * Parameters to attach or unlink team mod
 */
export type team_mod_params = {
  mod: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent mod teams
 */
export type mod_teams = {
  readonly mod?: mod;
  total?: number;
  teams?: Array<team_mod>;
};

/**
 * Parameters to attach or unlink mod team
 */
export type mod_team_params = {
  team: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent team mod
 */
export type team_mod = {
  team_id: string;
  readonly team?: team;
  mod_id: string;
  readonly mod?: mod;
  perm?: "user" | "admin" | "owner";
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent list of users
 */
export type users = {
  total?: number;
  users?: Array<user>;
};

/**
 * Model to represent user
 */
export type user = {
  readonly id?: string;
  username?: string;
  password?: string;
  email?: string;
  fullname?: string;
  profile?: string;
  admin?: boolean;
  active?: boolean;
  readonly created_at?: string;
  readonly updated_at?: string;
  readonly auths?: Array<user_auth>;
};

/**
 * Model to represent user auth
 */
export type user_auth = {
  provider?: string;
  ref?: string;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent user teams
 */
export type user_teams = {
  readonly user?: user;
  total?: number;
  teams?: Array<user_team>;
};

/**
 * Parameters to attach or unlink user team
 */
export type user_team_params = {
  team: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent team users
 */
export type team_users = {
  readonly team?: team;
  total?: number;
  users?: Array<user_team>;
};

/**
 * Parameters to attach or unlink team user
 */
export type team_user_params = {
  user: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent user team
 */
export type user_team = {
  user_id: string;
  readonly user?: user;
  team_id: string;
  readonly team?: team;
  perm?: "user" | "admin" | "owner";
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent user packs
 */
export type user_packs = {
  readonly user?: user;
  total?: number;
  packs?: Array<user_pack>;
};

/**
 * Parameters to attach or unlink user pack
 */
export type user_pack_params = {
  pack: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent pack users
 */
export type pack_users = {
  readonly pack?: pack;
  total?: number;
  users?: Array<user_pack>;
};

/**
 * Parameters to attach or unlink pack user
 */
export type pack_user_params = {
  user: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent user pack
 */
export type user_pack = {
  user_id: string;
  readonly user?: user;
  pack_id: string;
  readonly pack?: pack;
  perm?: "user" | "admin" | "owner";
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent user mods
 */
export type user_mods = {
  readonly user?: user;
  total?: number;
  mods?: Array<user_mod>;
};

/**
 * Parameters to attach or unlink user mod
 */
export type user_mod_params = {
  mod: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent mod users
 */
export type mod_users = {
  readonly mod?: mod;
  total?: number;
  users?: Array<user_mod>;
};

/**
 * Parameters to attach or unlink mod user
 */
export type mod_user_params = {
  user: string;
  perm?: "user" | "admin" | "owner";
};

/**
 * Model to represent user mod
 */
export type user_mod = {
  user_id: string;
  readonly user?: user;
  mod_id: string;
  readonly mod?: mod;
  perm?: "user" | "admin" | "owner";
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent build versions
 */
export type build_versions = {
  readonly pack?: pack;
  readonly build?: build;
  total?: number;
  versions?: Array<build_version>;
};

/**
 * Parameters to attach or unlink build version
 */
export type build_version_params = {
  mod: string;
  version: string;
};

/**
 * Model to represent version builds
 */
export type version_builds = {
  readonly mod?: mod;
  readonly version?: version;
  total?: number;
  builds?: Array<build_version>;
};

/**
 * Parameters to attach or unlink version build
 */
export type version_build_params = {
  pack: string;
  build: string;
};

/**
 * Model to represent build version
 */
export type build_version = {
  build_id: string;
  readonly build?: build;
  version_id: string;
  readonly version?: version;
  readonly created_at?: string;
  readonly updated_at?: string;
};

/**
 * Model to represent list of auth providers
 */
export type providers = {
  total?: number;
  listing?: Array<provider>;
};

/**
 * Model to represent auth provider
 */
export type provider = {
  readonly name?: string;
  readonly driver?: string;
  readonly display?: string;
  readonly icon?: string;
};

/**
 * Generic response for errors and validations
 */
export type notification = {
  status?: number;
  message?: string;
  errors?: Array<validation>;
};

/**
 * General structure to show validation errors
 */
export type validation = {
  field?: string;
  message?: string;
};

export type ExternalInitializeData = {
  path: {
    /**
     * An identifier for the auth provider
     */
    provider: string;
  };
  query?: {
    /**
     * Auth state
     */
    state?: string;
  };
};

export type ExternalInitializeResponse = notification;

export type ExternalInitializeError = unknown | notification;

export type ExternalCallbackData = {
  path: {
    /**
     * An identifier for the auth provider
     */
    provider: string;
  };
  query?: {
    /**
     * Auth code
     */
    code?: string;
    /**
     * Auth state
     */
    state?: string;
  };
};

export type ExternalCallbackResponse = notification;

export type ExternalCallbackError = unknown | notification;

export type ExternalProvidersResponse = providers;

export type ExternalProvidersError = notification;

export type LoginAuthData = {
  /**
   * The credentials to authenticate
   */
  body: auth_login;
};

export type LoginAuthResponse = auth_token;

export type LoginAuthError = notification;

export type RefreshAuthResponse = auth_token;

export type RefreshAuthError = notification;

export type VerifyAuthResponse = auth_verify;

export type VerifyAuthError = notification;

export type TokenProfileResponse = auth_token;

export type TokenProfileError = notification;

export type ShowProfileResponse = profile;

export type ShowProfileError = notification;

export type UpdateProfileData = {
  /**
   * The profile data to update
   */
  body: profile;
};

export type UpdateProfileResponse = profile;

export type UpdateProfileError = notification;

export type ListMinecraftsData = {
  query?: {
    /**
     * Search query
     */
    search?: string;
  };
};

export type ListMinecraftsResponse = minecrafts;

export type ListMinecraftsError = notification;

export type UpdateMinecraftResponse = notification;

export type UpdateMinecraftError = notification;

export type ListMinecraftBuildsData = {
  path: {
    /**
     * A minecraft identifier or slug
     */
    minecraft_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "build_name" | "build_public" | "pack_slug" | "pack_name";
  };
};

export type ListMinecraftBuildsResponse = minecraft_builds;

export type ListMinecraftBuildsError = notification;

export type AttachMinecraftToBuildData = {
  /**
   * The build data to attach
   */
  body: minecraft_build_params;
  path: {
    /**
     * A minecraft identifier or slug
     */
    minecraft_id: string;
  };
};

export type AttachMinecraftToBuildResponse = notification;

export type AttachMinecraftToBuildError = notification;

export type DeleteMinecraftFromBuildData = {
  /**
   * The build data to unlink
   */
  body: minecraft_build_params;
  path: {
    /**
     * A minecraft identifier or slug
     */
    minecraft_id: string;
  };
};

export type DeleteMinecraftFromBuildResponse = notification;

export type DeleteMinecraftFromBuildError = notification;

export type ListForgesData = {
  query?: {
    /**
     * Search query
     */
    search?: string;
  };
};

export type ListForgesResponse = forges;

export type ListForgesError = notification;

export type UpdateForgeResponse = notification;

export type UpdateForgeError = notification;

export type ListForgeBuildsData = {
  path: {
    /**
     * A forge identifier or slug
     */
    forge_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "build_name" | "build_public" | "pack_slug" | "pack_name";
  };
};

export type ListForgeBuildsResponse = forge_builds;

export type ListForgeBuildsError = notification;

export type AttachForgeToBuildData = {
  /**
   * The build data to attach
   */
  body: forge_build_params;
  path: {
    /**
     * A forge identifier or slug
     */
    forge_id: string;
  };
};

export type AttachForgeToBuildResponse = notification;

export type AttachForgeToBuildError = notification;

export type DeleteForgeFromBuildData = {
  /**
   * The build data to unlink
   */
  body: forge_build_params;
  path: {
    /**
     * A forge identifier or slug
     */
    forge_id: string;
  };
};

export type DeleteForgeFromBuildResponse = notification;

export type DeleteForgeFromBuildError = notification;

export type ListNeoforgesData = {
  query?: {
    /**
     * Search query
     */
    search?: string;
  };
};

export type ListNeoforgesResponse = neoforges;

export type ListNeoforgesError = notification;

export type UpdateNeoforgeResponse = notification;

export type UpdateNeoforgeError = notification;

export type ListNeoforgeBuildsData = {
  path: {
    /**
     * A neoforge identifier or slug
     */
    neoforge_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "build_name" | "build_public" | "pack_slug" | "pack_name";
  };
};

export type ListNeoforgeBuildsResponse = neoforge_builds;

export type ListNeoforgeBuildsError = notification;

export type AttachNeoforgeToBuildData = {
  /**
   * The build data to attach
   */
  body: neoforge_build_params;
  path: {
    /**
     * A neoforge identifier or slug
     */
    neoforge_id: string;
  };
};

export type AttachNeoforgeToBuildResponse = notification;

export type AttachNeoforgeToBuildError = notification;

export type DeleteNeoforgeFromBuildData = {
  /**
   * The build data to unlink
   */
  body: neoforge_build_params;
  path: {
    /**
     * A neoforge identifier or slug
     */
    neoforge_id: string;
  };
};

export type DeleteNeoforgeFromBuildResponse = notification;

export type DeleteNeoforgeFromBuildError = notification;

export type ListQuiltsData = {
  query?: {
    /**
     * Search query
     */
    search?: string;
  };
};

export type ListQuiltsResponse = quilts;

export type ListQuiltsError = notification;

export type UpdateQuiltResponse = notification;

export type UpdateQuiltError = notification;

export type ListQuiltBuildsData = {
  path: {
    /**
     * A quilt identifier or slug
     */
    quilt_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "build_name" | "build_public" | "pack_slug" | "pack_name";
  };
};

export type ListQuiltBuildsResponse = quilt_builds;

export type ListQuiltBuildsError = notification;

export type AttachQuiltToBuildData = {
  /**
   * The build data to attach
   */
  body: quilt_build_params;
  path: {
    /**
     * A quilt identifier or slug
     */
    quilt_id: string;
  };
};

export type AttachQuiltToBuildResponse = notification;

export type AttachQuiltToBuildError = notification;

export type DeleteQuiltFromBuildData = {
  /**
   * The build data to unlink
   */
  body: quilt_build_params;
  path: {
    /**
     * A quilt identifier or slug
     */
    quilt_id: string;
  };
};

export type DeleteQuiltFromBuildResponse = notification;

export type DeleteQuiltFromBuildError = notification;

export type ListFabricsData = {
  query?: {
    /**
     * Search query
     */
    search?: string;
  };
};

export type ListFabricsResponse = fabrics;

export type ListFabricsError = notification;

export type UpdateFabricResponse = notification;

export type UpdateFabricError = notification;

export type ListFabricBuildsData = {
  path: {
    /**
     * A fabric identifier or slug
     */
    fabric_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "build_name" | "build_public" | "pack_slug" | "pack_name";
  };
};

export type ListFabricBuildsResponse = fabric_builds;

export type ListFabricBuildsError = notification;

export type AttachFabricToBuildData = {
  /**
   * The build data to attach
   */
  body: fabric_build_params;
  path: {
    /**
     * A fabric identifier or slug
     */
    fabric_id: string;
  };
};

export type AttachFabricToBuildResponse = notification;

export type AttachFabricToBuildError = notification;

export type DeleteFabricFromBuildData = {
  /**
   * The build data to unlink
   */
  body: fabric_build_params;
  path: {
    /**
     * A fabric identifier or slug
     */
    fabric_id: string;
  };
};

export type DeleteFabricFromBuildResponse = notification;

export type DeleteFabricFromBuildError = notification;

export type ListPacksData = {
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name" | "public";
  };
};

export type ListPacksResponse = packs;

export type ListPacksError = notification;

export type CreatePackData = {
  /**
   * The pack data to create
   */
  body: pack;
};

export type CreatePackResponse = pack;

export type CreatePackError = notification;

export type ShowPackData = {
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type ShowPackResponse = pack;

export type ShowPackError = notification;

export type UpdatePackData = {
  /**
   * The pack data to update
   */
  body: pack;
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type UpdatePackResponse = pack;

export type UpdatePackError = notification;

export type DeletePackData = {
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type DeletePackResponse = notification;

export type DeletePackError = notification;

export type ListPackUsersData = {
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "username" | "email" | "fullname" | "admin" | "active";
  };
};

export type ListPackUsersResponse = pack_users;

export type ListPackUsersError = notification;

export type AttachPackToUserData = {
  /**
   * The user data to attach
   */
  body: pack_user_params;
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type AttachPackToUserResponse = notification;

export type AttachPackToUserError = notification;

export type PermitPackUserData = {
  /**
   * The user data to update
   */
  body: pack_user_params;
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type PermitPackUserResponse = notification;

export type PermitPackUserError = notification;

export type DeletePackFromUserData = {
  /**
   * The pack user data to unlink
   */
  body: pack_user_params;
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type DeletePackFromUserResponse = notification;

export type DeletePackFromUserError = notification;

export type ListPackTeamsData = {
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name";
  };
};

export type ListPackTeamsResponse = pack_teams;

export type ListPackTeamsError = notification;

export type AttachPackToTeamData = {
  /**
   * The team data to attach
   */
  body: pack_team_params;
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type AttachPackToTeamResponse = notification;

export type AttachPackToTeamError = notification;

export type PermitPackTeamData = {
  /**
   * The team data to update
   */
  body: pack_team_params;
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type PermitPackTeamResponse = notification;

export type PermitPackTeamError = notification;

export type DeletePackFromTeamData = {
  /**
   * The pack team data to unlink
   */
  body: pack_team_params;
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type DeletePackFromTeamResponse = notification;

export type DeletePackFromTeamError = notification;

export type ListBuildsData = {
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "name" | "public";
  };
};

export type ListBuildsResponse = builds;

export type ListBuildsError = notification;

export type CreateBuildData = {
  /**
   * The build data to create
   */
  body: build;
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type CreateBuildResponse = build;

export type CreateBuildError = notification;

export type ShowBuildData = {
  path: {
    /**
     * A build identifier or slug
     */
    build_id: string;
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type ShowBuildResponse = build;

export type ShowBuildError = notification;

export type UpdateBuildData = {
  /**
   * The build data to update
   */
  body: build;
  path: {
    /**
     * A build identifier or slug
     */
    build_id: string;
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type UpdateBuildResponse = build;

export type UpdateBuildError = notification;

export type DeleteBuildData = {
  path: {
    /**
     * A build identifier or slug
     */
    build_id: string;
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type DeleteBuildResponse = notification;

export type DeleteBuildError = notification;

export type ListBuildVersionsData = {
  path: {
    /**
     * A build identifier or slug
     */
    build_id: string;
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "name" | "public";
  };
};

export type ListBuildVersionsResponse = build_versions;

export type ListBuildVersionsError = notification;

export type AttachBuildToVersionData = {
  /**
   * The build version data to attach
   */
  body: build_version_params;
  path: {
    /**
     * A build identifier or slug
     */
    build_id: string;
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type AttachBuildToVersionResponse = notification;

export type AttachBuildToVersionError = notification;

export type DeleteBuildFromVersionData = {
  /**
   * The build version data to unlink
   */
  body: build_version_params;
  path: {
    /**
     * A build identifier or slug
     */
    build_id: string;
    /**
     * A pack identifier or slug
     */
    pack_id: string;
  };
};

export type DeleteBuildFromVersionResponse = notification;

export type DeleteBuildFromVersionError = notification;

export type ListModsData = {
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name" | "public";
  };
};

export type ListModsResponse = mods;

export type ListModsError = notification;

export type CreateModData = {
  /**
   * The mod data to create
   */
  body: mod;
};

export type CreateModResponse = mod;

export type CreateModError = notification;

export type ShowModData = {
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type ShowModResponse = mod;

export type ShowModError = notification;

export type UpdateModData = {
  /**
   * The mod data to update
   */
  body: mod;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type UpdateModResponse = mod;

export type UpdateModError = notification;

export type DeleteModData = {
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type DeleteModResponse = notification;

export type DeleteModError = notification;

export type ListModUsersData = {
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "username" | "email" | "fullname" | "admin" | "active";
  };
};

export type ListModUsersResponse = mod_users;

export type ListModUsersError = notification;

export type AttachModToUserData = {
  /**
   * The user data to attach
   */
  body: mod_user_params;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type AttachModToUserResponse = notification;

export type AttachModToUserError = notification;

export type PermitModUserData = {
  /**
   * The user data to update
   */
  body: mod_user_params;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type PermitModUserResponse = notification;

export type PermitModUserError = notification;

export type DeleteModFromUserData = {
  /**
   * The mod user data to unlink
   */
  body: mod_user_params;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type DeleteModFromUserResponse = notification;

export type DeleteModFromUserError = notification;

export type ListModTeamsData = {
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name";
  };
};

export type ListModTeamsResponse = mod_teams;

export type ListModTeamsError = notification;

export type AttachModToTeamData = {
  /**
   * The team data to attach
   */
  body: mod_team_params;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type AttachModToTeamResponse = notification;

export type AttachModToTeamError = notification;

export type PermitModTeamData = {
  /**
   * The team data to update
   */
  body: mod_team_params;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type PermitModTeamResponse = notification;

export type PermitModTeamError = notification;

export type DeleteModFromTeamData = {
  /**
   * The mod team data to unlink
   */
  body: mod_team_params;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type DeleteModFromTeamResponse = notification;

export type DeleteModFromTeamError = notification;

export type ListVersionsData = {
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "name" | "public";
  };
};

export type ListVersionsResponse = versions;

export type ListVersionsError = notification;

export type CreateVersionData = {
  /**
   * The version data to create
   */
  body: version;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
  };
};

export type CreateVersionResponse = version;

export type CreateVersionError = notification;

export type ShowVersionData = {
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
    /**
     * A version identifier or slug
     */
    version_id: string;
  };
};

export type ShowVersionResponse = version;

export type ShowVersionError = notification;

export type UpdateVersionData = {
  /**
   * The version data to update
   */
  body: version;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
    /**
     * A version identifier or slug
     */
    version_id: string;
  };
};

export type UpdateVersionResponse = version;

export type UpdateVersionError = notification;

export type DeleteVersionData = {
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
    /**
     * A version identifier or slug
     */
    version_id: string;
  };
};

export type DeleteVersionResponse = notification;

export type DeleteVersionError = notification;

export type ListVersionBuildsData = {
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
    /**
     * A version identifier or slug
     */
    version_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "name" | "public";
  };
};

export type ListVersionBuildsResponse = version_builds;

export type ListVersionBuildsError = notification;

export type AttachVersionToBuildData = {
  /**
   * The version build data to attach
   */
  body: version_build_params;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
    /**
     * A version identifier or slug
     */
    version_id: string;
  };
};

export type AttachVersionToBuildResponse = notification;

export type AttachVersionToBuildError = notification;

export type DeleteVersionFromBuildData = {
  /**
   * The version build data to unlink
   */
  body: version_build_params;
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string;
    /**
     * A version identifier or slug
     */
    version_id: string;
  };
};

export type DeleteVersionFromBuildResponse = notification;

export type DeleteVersionFromBuildError = notification;

export type ListTeamsData = {
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name";
  };
};

export type ListTeamsResponse = teams;

export type ListTeamsError = notification;

export type CreateTeamData = {
  /**
   * The team data to create
   */
  body: team;
};

export type CreateTeamResponse = team;

export type CreateTeamError = notification;

export type ShowTeamData = {
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type ShowTeamResponse = team;

export type ShowTeamError = notification;

export type UpdateTeamData = {
  /**
   * The team data to update
   */
  body: team;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type UpdateTeamResponse = team;

export type UpdateTeamError = notification;

export type DeleteTeamData = {
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type DeleteTeamResponse = notification;

export type DeleteTeamError = notification;

export type ListTeamUsersData = {
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "username" | "email" | "fullname" | "admin" | "active";
  };
};

export type ListTeamUsersResponse = team_users;

export type ListTeamUsersError = notification;

export type AttachTeamToUserData = {
  /**
   * The team user data to attach
   */
  body: team_user_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type AttachTeamToUserResponse = notification;

export type AttachTeamToUserError = notification;

export type PermitTeamUserData = {
  /**
   * The team user data to update
   */
  body: team_user_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type PermitTeamUserResponse = notification;

export type PermitTeamUserError = notification;

export type DeleteTeamFromUserData = {
  /**
   * The team user data to unlink
   */
  body: team_user_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type DeleteTeamFromUserResponse = notification;

export type DeleteTeamFromUserError = notification;

export type ListTeamModsData = {
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name" | "public";
  };
};

export type ListTeamModsResponse = team_mods;

export type ListTeamModsError = notification;

export type AttachTeamToModData = {
  /**
   * The team mod data to attach
   */
  body: team_mod_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type AttachTeamToModResponse = notification;

export type AttachTeamToModError = notification;

export type PermitTeamModData = {
  /**
   * The team mod data to update
   */
  body: team_mod_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type PermitTeamModResponse = notification;

export type PermitTeamModError = notification;

export type DeleteTeamFromModData = {
  /**
   * The team mod data to unlink
   */
  body: team_mod_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type DeleteTeamFromModResponse = notification;

export type DeleteTeamFromModError = notification;

export type ListTeamPacksData = {
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name" | "public";
  };
};

export type ListTeamPacksResponse = team_packs;

export type ListTeamPacksError = notification;

export type AttachTeamToPackData = {
  /**
   * The team pack data to attach
   */
  body: team_pack_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type AttachTeamToPackResponse = notification;

export type AttachTeamToPackError = notification;

export type PermitTeamPackData = {
  /**
   * The team pack data to update
   */
  body: team_pack_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type PermitTeamPackResponse = notification;

export type PermitTeamPackError = notification;

export type DeleteTeamFromPackData = {
  /**
   * The team pack data to unlink
   */
  body: team_pack_params;
  path: {
    /**
     * A team identifier or slug
     */
    team_id: string;
  };
};

export type DeleteTeamFromPackResponse = notification;

export type DeleteTeamFromPackError = notification;

export type ListUsersData = {
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "username" | "email" | "fullname" | "admin" | "active";
  };
};

export type ListUsersResponse = users;

export type ListUsersError = notification;

export type CreateUserData = {
  /**
   * The user data to create
   */
  body: user;
};

export type CreateUserResponse = user;

export type CreateUserError = notification;

export type ShowUserData = {
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type ShowUserResponse = user;

export type ShowUserError = notification;

export type UpdateUserData = {
  /**
   * The user data to update
   */
  body: user;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type UpdateUserResponse = user;

export type UpdateUserError = notification;

export type DeleteUserData = {
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type DeleteUserResponse = notification;

export type DeleteUserError = notification;

export type ListUserTeamsData = {
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name";
  };
};

export type ListUserTeamsResponse = user_teams;

export type ListUserTeamsError = notification;

export type AttachUserToTeamData = {
  /**
   * The user team data to attach
   */
  body: user_team_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type AttachUserToTeamResponse = notification;

export type AttachUserToTeamError = notification;

export type PermitUserTeamData = {
  /**
   * The user team data to update
   */
  body: user_team_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type PermitUserTeamResponse = notification;

export type PermitUserTeamError = notification;

export type DeleteUserFromTeamData = {
  /**
   * The user team data to unlink
   */
  body: user_team_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type DeleteUserFromTeamResponse = notification;

export type DeleteUserFromTeamError = notification;

export type ListUserModsData = {
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name" | "public";
  };
};

export type ListUserModsResponse = user_mods;

export type ListUserModsError = notification;

export type AttachUserToModData = {
  /**
   * The user mod data to attach
   */
  body: user_mod_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type AttachUserToModResponse = notification;

export type AttachUserToModError = notification;

export type PermitUserModData = {
  /**
   * The user mod data to update
   */
  body: user_mod_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type PermitUserModResponse = notification;

export type PermitUserModError = notification;

export type DeleteUserFromModData = {
  /**
   * The user mod data to unlink
   */
  body: user_mod_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type DeleteUserFromModResponse = notification;

export type DeleteUserFromModError = notification;

export type ListUserPacksData = {
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
  query?: {
    /**
     * Paging limit
     */
    limit?: number;
    /**
     * Paging offset
     */
    offset?: number;
    /**
     * Sorting order
     */
    order?: "asc" | "desc";
    /**
     * Search query
     */
    search?: string;
    /**
     * Sorting column
     */
    sort?: "slug" | "name" | "public";
  };
};

export type ListUserPacksResponse = user_packs;

export type ListUserPacksError = notification;

export type AttachUserToPackData = {
  /**
   * The user pack data to attach
   */
  body: user_pack_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type AttachUserToPackResponse = notification;

export type AttachUserToPackError = notification;

export type PermitUserPackData = {
  /**
   * The user pack data to update
   */
  body: user_pack_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type PermitUserPackResponse = notification;

export type PermitUserPackError = notification;

export type DeleteUserFromPackData = {
  /**
   * The user pack data to unlink
   */
  body: user_pack_params;
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string;
  };
};

export type DeleteUserFromPackResponse = notification;

export type DeleteUserFromPackError = notification;
