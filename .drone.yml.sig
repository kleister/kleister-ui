eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9zcnYvYXBwCiAgcGF0aDogc3JjL2dpdGh1Yi5jb20va2xlaXN0ZXIva2xlaXN0ZXItdWkKCnBpcGVsaW5lOgogIHRlc3Rpbmc6CiAgICBpbWFnZTogd2ViaGlwcGllL25vZGVqczpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIG5wbSBpbnN0YWxsCiAgICAgIC0gbnBtIHJ1biBsaW50CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICAgICAtIG5wbSBydW4gdGVzdAoKICBzZXJ2ZXI6CiAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzpsYXRlc3QKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vc3J2L2FwcAogICAgcHVsbDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBjbGVhbgogICAgICAtIG1ha2UgZGVwcwogICAgICAtIG1ha2UgbGludAogICAgICAtIG1ha2UgZ2VuZXJhdGUKICAgICAgLSBtYWtlIHRlc3QKICAgICAgLSBtYWtlIGJ1aWxkCgogIHVwZGF0ZXI6CiAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzpsYXRlc3QKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vc3J2L2FwcAogICAgcHVsbDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBwdWJsaXNoCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWZzL3RhZ3MvKiBdCgogIGNvdmVyYWdlOgogICAgaW1hZ2U6IGtsZWlzdGVyL2NvdmVyYWdlCiAgICBzZXJ2ZXI6IGh0dHA6Ly9jb3ZlcmFnZS5kcm9uZWhpcHBpZS5kZQoKICAjIHJzeW5jOgogICMgICBpbWFnZTogcGx1Z2lucy9yc3luYwogICMgICB1c2VyOiBkZXBsb3kKICAjICAgaG9zdDogZGwud2ViaGlwcGllLmRlCiAgIyAgIHNvdXJjZTogZGlzdC9yZWxlYXNlLwogICMgICB0YXJnZXQ6IC91c3Ivc2hhcmUvd2ViYXBwcy9kbC9wdWJsaWNfaHRtbC9rbGVpc3Rlci11aS9tYXN0ZXIKICAjICAgcmVjdXJzaXZlOiB0cnVlCiAgIyAgIGRlbGV0ZTogdHJ1ZQogICMgICB3aGVuOgogICMgICAgIGV2ZW50OiBwdXNoCiAgIyAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgIyByc3luYzoKICAjICAgaW1hZ2U6IHBsdWdpbnMvcnN5bmMKICAjICAgdXNlcjogZGVwbG95CiAgIyAgIGhvc3Q6IGRsLndlYmhpcHBpZS5kZQogICMgICBzb3VyY2U6IGRpc3QvcmVsZWFzZS8KICAjICAgdGFyZ2V0OiAvdXNyL3NoYXJlL3dlYmFwcHMvZGwvcHVibGljX2h0bWwva2xlaXN0ZXItdWkvJCRUQUcKICAjICAgcmVjdXJzaXZlOiB0cnVlCiAgIyAgIGRlbGV0ZTogdHJ1ZQogICMgICB3aGVuOgogICMgICAgIGV2ZW50OiB0YWcKICAjICAgICBicmFuY2g6IHJlZnMvdGFncy8qCgogICMgcnN5bmM6CiAgIyAgIGltYWdlOiBwbHVnaW5zL3JzeW5jCiAgIyAgIHVzZXI6IGRlcGxveQogICMgICBob3N0OiBkbC53ZWJoaXBwaWUuZGUKICAjICAgc291cmNlOiBkaXN0L2xhdGVzdC8KICAjICAgdGFyZ2V0OiAvdXNyL3NoYXJlL3dlYmFwcHMvZGwvcHVibGljX2h0bWwva2xlaXN0ZXItdWkvbGF0ZXN0CiAgIyAgIHJlY3Vyc2l2ZTogdHJ1ZQogICMgICBkZWxldGU6IHRydWUKICAjICAgd2hlbjoKICAjICAgICBldmVudDogdGFnCiAgIyAgICAgYnJhbmNoOiByZWZzL3RhZ3MvKgoKICAjIHJzeW5jOgogICMgICBpbWFnZTogcGx1Z2lucy9yc3luYwogICMgICB1c2VyOiBkZXBsb3kKICAjICAgaG9zdDogZGwud2ViaGlwcGllLmRlCiAgIyAgIHNvdXJjZTogZGlzdC9wdWJsaXNoLwogICMgICB0YXJnZXQ6IC91c3Ivc2hhcmUvd2ViYXBwcy9kbC9wdWJsaWNfaHRtbC9rbGVpc3Rlci11aS91cGRhdGVzCiAgIyAgIHJlY3Vyc2l2ZTogdHJ1ZQogICMgICBkZWxldGU6IGZhbHNlCiAgIyAgIHdoZW46CiAgIyAgICAgZXZlbnQ6IHRhZwogICMgICAgIGJyYW5jaDogcmVmcy90YWdzLyoKCiAgIyBnaXRodWJfcmVsZWFzZToKICAjICAgaW1hZ2U6IHBsdWdpbnMvZ2l0aHViLXJlbGVhc2UKICAjICAgZmlsZXM6CiAgIyAgICAgLSBkaXN0L3JlbGVhc2UvKgogICMgICB3aGVuOgogICMgICAgIGV2ZW50OiB0YWcKICAjICAgICBicmFuY2g6IHJlZnMvdGFncy8qCgogIGRvY2tlcjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgc3RvcmFnZV9kcml2ZXI6IG92ZXJsYXkKICAgIGRlYnVnOiB0cnVlCiAgICByZXBvOiBrbGVpc3Rlci9rbGVpc3Rlci11aQogICAgdGFnczogWyAnJHtUQUd9JyBdCiAgICB3aGVuOgogICAgICBldmVudDogdGFnCiAgICAgIGJyYW5jaDogcmVmcy90YWdzLyoKCiAgZG9ja2VyOgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICBzdG9yYWdlX2RyaXZlcjogb3ZlcmxheQogICAgZGVidWc6IHRydWUKICAgIHJlcG86IGtsZWlzdGVyL2tsZWlzdGVyLXVpCiAgICB0YWdzOiBbICdsYXRlc3QnIF0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCiAgICAgIGJyYW5jaDogbWFzdGVyCgogIGdpdHRlcjoKICAgIGltYWdlOiBrbGVpc3Rlci9naXR0ZXIK.kI5tfMe5AAjUsz-YbyxgUJkKxJEfQK8n9ThdyAqz5QU