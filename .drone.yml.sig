eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9zcnYvYXBwCiAgcGF0aDogc3JjL2dpdGh1Yi5jb20va2xlaXN0ZXIva2xlaXN0ZXItdWkKCnBpcGVsaW5lOgogIHRlc3Rpbmc6CiAgICBpbWFnZTogd2ViaGlwcGllL25vZGVqczpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIG5wbSBpbnN0YWxsCiAgICAgIC0gbnBtIHJ1biBsaW50CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICAgICAtIG5wbSBydW4gdGVzdAoKICBzZXJ2ZXI6CiAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzpsYXRlc3QKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vc3J2L2FwcAogICAgcHVsbDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBjbGVhbgogICAgICAtIG1ha2UgZGVwcwogICAgICAtIG1ha2UgbGludAogICAgICAtIG1ha2UgZ2VuZXJhdGUKICAgICAgLSBtYWtlIHRlc3QKICAgICAgLSBtYWtlIGJ1aWxkCgogIHVwZGF0ZXI6CiAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzpsYXRlc3QKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vc3J2L2FwcAogICAgcHVsbDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBwdWJsaXNoCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWZzL3RhZ3MvKiBdCgogICMgY292ZXJhZ2U6CiAgIyAgIGltYWdlOiBwbHVnaW5zL2NvdmVyYWdlCgogICMgcnN5bmM6CiAgIyAgIGltYWdlOiBwbHVnaW5zL3JzeW5jCiAgIyAgIHVzZXI6IGRlcGxveQogICMgICBob3N0OiBkbC53ZWJoaXBwaWUuZGUKICAjICAgc291cmNlOiBkaXN0L3JlbGVhc2UvCiAgIyAgIHRhcmdldDogL3Vzci9zaGFyZS93ZWJhcHBzL2RsL3B1YmxpY19odG1sL2tsZWlzdGVyLXVpL21hc3RlcgogICMgICByZWN1cnNpdmU6IHRydWUKICAjICAgZGVsZXRlOiB0cnVlCiAgIyAgIHdoZW46CiAgIyAgICAgZXZlbnQ6IHB1c2gKICAjICAgICBicmFuY2g6IG1hc3RlcgoKICAjIHJzeW5jOgogICMgICBpbWFnZTogcGx1Z2lucy9yc3luYwogICMgICB1c2VyOiBkZXBsb3kKICAjICAgaG9zdDogZGwud2ViaGlwcGllLmRlCiAgIyAgIHNvdXJjZTogZGlzdC9yZWxlYXNlLwogICMgICB0YXJnZXQ6IC91c3Ivc2hhcmUvd2ViYXBwcy9kbC9wdWJsaWNfaHRtbC9rbGVpc3Rlci11aS8kJFRBRwogICMgICByZWN1cnNpdmU6IHRydWUKICAjICAgZGVsZXRlOiB0cnVlCiAgIyAgIHdoZW46CiAgIyAgICAgZXZlbnQ6IHRhZwogICMgICAgIGJyYW5jaDogcmVmcy90YWdzLyoKCiAgIyByc3luYzoKICAjICAgaW1hZ2U6IHBsdWdpbnMvcnN5bmMKICAjICAgdXNlcjogZGVwbG95CiAgIyAgIGhvc3Q6IGRsLndlYmhpcHBpZS5kZQogICMgICBzb3VyY2U6IGRpc3QvbGF0ZXN0LwogICMgICB0YXJnZXQ6IC91c3Ivc2hhcmUvd2ViYXBwcy9kbC9wdWJsaWNfaHRtbC9rbGVpc3Rlci11aS9sYXRlc3QKICAjICAgcmVjdXJzaXZlOiB0cnVlCiAgIyAgIGRlbGV0ZTogdHJ1ZQogICMgICB3aGVuOgogICMgICAgIGV2ZW50OiB0YWcKICAjICAgICBicmFuY2g6IHJlZnMvdGFncy8qCgogICMgcnN5bmM6CiAgIyAgIGltYWdlOiBwbHVnaW5zL3JzeW5jCiAgIyAgIHVzZXI6IGRlcGxveQogICMgICBob3N0OiBkbC53ZWJoaXBwaWUuZGUKICAjICAgc291cmNlOiBkaXN0L3B1Ymxpc2gvCiAgIyAgIHRhcmdldDogL3Vzci9zaGFyZS93ZWJhcHBzL2RsL3B1YmxpY19odG1sL2tsZWlzdGVyLXVpL3VwZGF0ZXMKICAjICAgcmVjdXJzaXZlOiB0cnVlCiAgIyAgIGRlbGV0ZTogZmFsc2UKICAjICAgd2hlbjoKICAjICAgICBldmVudDogdGFnCiAgIyAgICAgYnJhbmNoOiByZWZzL3RhZ3MvKgoKICAjIGdpdGh1Yl9yZWxlYXNlOgogICMgICBpbWFnZTogcGx1Z2lucy9naXRodWItcmVsZWFzZQogICMgICBmaWxlczoKICAjICAgICAtIGRpc3QvcmVsZWFzZS8qCiAgIyAgIHdoZW46CiAgIyAgICAgZXZlbnQ6IHRhZwogICMgICAgIGJyYW5jaDogcmVmcy90YWdzLyoKCgogIGRvY2tlcjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgc3RvcmFnZV9kcml2ZXI6IG92ZXJsYXkKICAgIGRlYnVnOiB0cnVlCiAgICByZXBvOiBrbGVpc3Rlci9rbGVpc3Rlci11aQogICAgdGFnczogWyAnJHtUQUd9JyBdCiAgICB3aGVuOgogICAgICBldmVudDogdGFnCiAgICAgIGJyYW5jaDogcmVmcy90YWdzLyoKCiAgZG9ja2VyOgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICBzdG9yYWdlX2RyaXZlcjogb3ZlcmxheQogICAgZGVidWc6IHRydWUKICAgIHJlcG86IGtsZWlzdGVyL2tsZWlzdGVyLXVpCiAgICB0YWdzOiBbICdsYXRlc3QnIF0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCiAgICAgIGJyYW5jaDogbWFzdGVyCgogICMgZ2l0dGVyOgogICMgICBpbWFnZTogcGx1Z2lucy9naXR0ZXIK.-GVO2COYLYlSa5nui50aTsmFRRKS_LlkzTPbRr8FYxc