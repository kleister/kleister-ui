eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9zcnYvYXBwCiAgcGF0aDogc3JjL2dpdGh1Yi5jb20va2xlaXN0ZXIva2xlaXN0ZXItdWkKCnBpcGVsaW5lOgogIHRlc3Rpbmc6CiAgICBpbWFnZTogd2ViaGlwcGllL25vZGVqczpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIG5wbSBpbnN0YWxsCiAgICAgIC0gbnBtIHJ1biBsaW50CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICAgICAtIG5wbSBydW4gdGVzdAoKICBzZXJ2ZXI6CiAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzpsYXRlc3QKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vc3J2L2FwcAogICAgcHVsbDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBjbGVhbgogICAgICAtIG1ha2UgZGVwcwogICAgICAtIG1ha2UgbGludAogICAgICAtIG1ha2UgZ2VuZXJhdGUKICAgICAgLSBtYWtlIHRlc3QKICAgICAgLSBtYWtlIGJ1aWxkCgogIHVwZGF0ZXI6CiAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzpsYXRlc3QKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vc3J2L2FwcAogICAgcHVsbDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBwdWJsaXNoCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWZzL3RhZ3MvKiBdCgogIGNvdmVyYWdlOgogICAgaW1hZ2U6IGtsZWlzdGVyL2NvdmVyYWdlCiAgICBzZXJ2ZXI6IGh0dHA6Ly9jb3ZlcmFnZS53ZWJoaXBwaWUuZGUKCiAgIyByc3luYzoKICAjICAgaW1hZ2U6IHBsdWdpbnMvcnN5bmMKICAjICAgdXNlcjogZGVwbG95CiAgIyAgIGhvc3Q6IGRsLndlYmhpcHBpZS5kZQogICMgICBzb3VyY2U6IGRpc3QvcmVsZWFzZS8KICAjICAgdGFyZ2V0OiAvdXNyL3NoYXJlL3dlYmFwcHMvZGwvcHVibGljX2h0bWwva2xlaXN0ZXItdWkvbWFzdGVyCiAgIyAgIHJlY3Vyc2l2ZTogdHJ1ZQogICMgICBkZWxldGU6IHRydWUKICAjICAgd2hlbjoKICAjICAgICBldmVudDogcHVzaAogICMgICAgIGJyYW5jaDogbWFzdGVyCgogICMgcnN5bmM6CiAgIyAgIGltYWdlOiBwbHVnaW5zL3JzeW5jCiAgIyAgIHVzZXI6IGRlcGxveQogICMgICBob3N0OiBkbC53ZWJoaXBwaWUuZGUKICAjICAgc291cmNlOiBkaXN0L3JlbGVhc2UvCiAgIyAgIHRhcmdldDogL3Vzci9zaGFyZS93ZWJhcHBzL2RsL3B1YmxpY19odG1sL2tsZWlzdGVyLXVpLyQkVEFHCiAgIyAgIHJlY3Vyc2l2ZTogdHJ1ZQogICMgICBkZWxldGU6IHRydWUKICAjICAgd2hlbjoKICAjICAgICBldmVudDogdGFnCiAgIyAgICAgYnJhbmNoOiByZWZzL3RhZ3MvKgoKICAjIHJzeW5jOgogICMgICBpbWFnZTogcGx1Z2lucy9yc3luYwogICMgICB1c2VyOiBkZXBsb3kKICAjICAgaG9zdDogZGwud2ViaGlwcGllLmRlCiAgIyAgIHNvdXJjZTogZGlzdC9sYXRlc3QvCiAgIyAgIHRhcmdldDogL3Vzci9zaGFyZS93ZWJhcHBzL2RsL3B1YmxpY19odG1sL2tsZWlzdGVyLXVpL2xhdGVzdAogICMgICByZWN1cnNpdmU6IHRydWUKICAjICAgZGVsZXRlOiB0cnVlCiAgIyAgIHdoZW46CiAgIyAgICAgZXZlbnQ6IHRhZwogICMgICAgIGJyYW5jaDogcmVmcy90YWdzLyoKCiAgIyByc3luYzoKICAjICAgaW1hZ2U6IHBsdWdpbnMvcnN5bmMKICAjICAgdXNlcjogZGVwbG95CiAgIyAgIGhvc3Q6IGRsLndlYmhpcHBpZS5kZQogICMgICBzb3VyY2U6IGRpc3QvcHVibGlzaC8KICAjICAgdGFyZ2V0OiAvdXNyL3NoYXJlL3dlYmFwcHMvZGwvcHVibGljX2h0bWwva2xlaXN0ZXItdWkvdXBkYXRlcwogICMgICByZWN1cnNpdmU6IHRydWUKICAjICAgZGVsZXRlOiBmYWxzZQogICMgICB3aGVuOgogICMgICAgIGV2ZW50OiB0YWcKICAjICAgICBicmFuY2g6IHJlZnMvdGFncy8qCgogICMgZ2l0aHViX3JlbGVhc2U6CiAgIyAgIGltYWdlOiBwbHVnaW5zL2dpdGh1Yi1yZWxlYXNlCiAgIyAgIGZpbGVzOgogICMgICAgIC0gZGlzdC9yZWxlYXNlLyoKICAjICAgd2hlbjoKICAjICAgICBldmVudDogdGFnCiAgIyAgICAgYnJhbmNoOiByZWZzL3RhZ3MvKgoKICBkb2NrZXI6CiAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgIHN0b3JhZ2VfZHJpdmVyOiBvdmVybGF5CiAgICBkZWJ1ZzogdHJ1ZQogICAgcmVwbzoga2xlaXN0ZXIva2xlaXN0ZXItdWkKICAgIHRhZ3M6IFsgJyR7VEFHfScgXQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHRhZwogICAgICBicmFuY2g6IHJlZnMvdGFncy8qCgogIGRvY2tlcjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgc3RvcmFnZV9kcml2ZXI6IG92ZXJsYXkKICAgIGRlYnVnOiB0cnVlCiAgICByZXBvOiBrbGVpc3Rlci9rbGVpc3Rlci11aQogICAgdGFnczogWyAnbGF0ZXN0JyBdCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKICBnaXR0ZXI6CiAgICBpbWFnZToga2xlaXN0ZXIvZ2l0dGVyCg.JlcqEXfncjZ7VgOi87Eii-I4Fm-KSWV1N6b3fQBmMBc